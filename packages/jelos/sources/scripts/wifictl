#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# Copyright (C) 2020 Fewtarius (https://github.com/fewtarius)
# Copyright (C) 2022 kkoshelev (https://github.com/kkoshelev)

. /etc/profile

if [ ! -d "" ]
then
  mkdir -p "/storage/.cache/connman"
fi

### ES won't save the configuration in time
### for it to be useable by the script, so
### we have to accept the ssid and key on the
### command line too.

if [ ! -z "${2}" ]
then
  SSID="${2}"
else
  SSID="$(get_setting wifi.ssid)" 2>/dev/null
fi

if [ ! -z "${3}" ]
then
  PSK="${3}"
else
  PSK="$(get_setting wifi.key)" 2>/dev/null
fi

###
### Basic WIFI properties used across the tool.
###

WIFI_CFG="/storage/.cache/connman/wifi.config"
WIFI_TYPE=$(get_setting network.adhoc.enabled)
ADHOC_FREQ="5280"

# lists all wifi services in service=ssid format
list_wifi() {
  connmanctl services | cut -b 5- | awk '/\S+.+\s+wifi/ {a=$0; sub(/\s+wifi_.*$/,"", a); b=$0; sub(a, "", b); sub(/\s+/, "", b); print b "=" a}' | sort | uniq
}

# Looksup connman service name based on ssid
# $1 - SSID to lookup
get_wifi_service() {
  list_wifi | awk -v ssid="${1}" '{ split($0, a, "="); if (a[2]==ssid) print a[1] }'
}

set_powersave() {
  ENABLED=$(get_setting system.power.wifi)
  if [ "${ENABLED}" = "1" ]
  then
    log $0 "Enabling WIFI power saving."
    iw wlan0 set power_save on 2>/dev/null
  else
    log $0 "Disabling WIFI power saving."
    iw wlan0 set power_save off 2>/dev/null
  fi
}

get_wifi_state() {
  STATE=$(connmanctl state | awk '/State/ {print $3}' 2>/dev/null)
  echo ${STATE}
}

check_wifi() {
  SSID_CHK=$(grep "${SSID}" ${WIFI_CFG} 2>/dev/null)
  KEY_CHK=$(grep "${PSK}" ${WIFI_CFG} 2>/dev/null)
  STATE=$(get_wifi_state)
  if [ -n "${SSID_CHK}" ] && \
     [ -n "${KEY_CHK}" ] && \
     [ "${STATE}" = "online" ]
  then
    exit 0
  fi
}

connect_wifi() {

  ### Make sure the service is available
  NETCHECK=$(systemctl is-actove connman >/dev/null 2>&1)
  if [ "${NETCHECK}" = "inactive" ]
  then
    systemctl restart connman >/dev/null 2>&1
    systemctl restart wpa_supplicant 2>&1
  fi

  ### If we aren't already online. Go online.
  STATE=$(get_wifi_state)
  if [ ! "${STATE}" = "online" ]
  then
    connmanctl enable wifi 2>/dev/null
  fi

  set_powersave 2>/dev/null
}

connect_adhoc() {
  local CLIENT=$(get_setting wifi.adhoc.id)
  rfkill unblock wifi

  ### Set the WIFI type to ad-hoc
  iw dev wlan0 del
  iw phy phy0 interface add wlan0 type ibss

  ### Start the interfaece
  ip link set wlan0 up >/dev/null 2>&1

  ### Create / join the adhoc network
  iw wlan0 ibss join ${SSID}-adhoc ${ADHOC_FREQ} >/dev/null 2>&1

  iw wlan0 connect ${SSID}-adhoc

  ### Enable security
  cat <<EOF >/storage/.cache/.adhoc.conf
ap_scan=2

network={
    ssid="${SSID}-adhoc"
    mode=1
    frequency=${ADHOC_FREQ}
    proto=RSN
    key_mgmt=WPA-PSK
    pairwise=CCMP
    group=CCMP
    psk="${PSK}"
}
EOF

  wpa_supplicant -B -i wlan0 -c /storage/.cache/.adhoc.conf -D nl80211,wext

  ### Set our IP
  ip addr add 192.168.0.${CLIENT}/24 dev wlan0 >/dev/null 2>&1
}

disconnect_adhoc() {
  ip addr flush dev wlan0 >/dev/null 2>&1
  ip link set wlan0 down >/dev/null 2>&1
  killall wpa_supplicant
  ### Set the WIFI type to ad-hoc
  iw dev wlan0 del
  iw phy phy0 interface add wlan0 type managed
}

set_profile() {
  cat > "${WIFI_CFG}" <<EOF
[service_${OS_NAME}_default]
Type = wifi
Name = ${SSID}
Passphrase = ${PSK}
EOF
}

case "${1}" in
  enable)
    case ${WIFI_TYPE} in
      1)
        systemctl stop wpa_supplicant >/dev/null 2>&1
        systemctl stop connman >/dev/null 2>&1
        connect_adhoc >/dev/null 2>&1
      ;;
      *)
        check_wifi >/dev/null 2>&1
        disconnect_adhoc >/dev/null 2>&1
        set_profile >/dev/null 2>&1
        connect_wifi >/dev/null 2>&1
      ;;
    esac
    set_setting wifi.enabled 1
  ;;
  disable)
    case ${WIFI_TYPE} in
      1)
        disconnect_adhoc >/dev/null 2>&1
      ;;
      *)
        connmanctl disable wifi >/dev/null 2>&1
        rm -f "${WIFI_CFG}" 2>/dev/null
      ;;
    esac
    rfkill block wifi
    set_setting wifi.enabled 0
  ;;
  reconnect)
    /usr/bin/wifictl disable
    /usr/bin/wifictl enable
  ;;
  list)
    list_wifi | awk '{sub(/\S+=/,"",$0);print}'
  ;;
  scan)
    connmanctl scan wifi 2>/dev/null
  ;;
  scanlist)
    set_wifi scan 2>/dev/null
    list_wifi | awk '{sub(/\S+=/,"",$0);print}'
  ;;
  service)
     get_wifi_service "${SSID}"
  ;;
  setpowersave)
    set_powersave
  ;;
  setprofile)
    set_profile
  ;;
esac
