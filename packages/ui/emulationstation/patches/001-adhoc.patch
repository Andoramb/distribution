diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index b608b6c..f6c3414 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -4212,9 +4212,10 @@ void GuiMenu::openWifiSettings(Window* win, std::string title, std::string data,
 	win->pushGui(new GuiWifi(win, title, data, onsave));
 }
 
-void GuiMenu::openNetworkSettings_batocera(bool selectWifiEnable)
+void GuiMenu::openNetworkSettings_batocera(bool selectWifiEnable, bool selectAdhocEnable)
 {
 	bool baseNetworkEnabled = SystemConf::getInstance()->getBool("network.enabled");
+	bool adhocEnabled = SystemConf::getInstance()->getBool("network.adhoc.enabled");
 
 	auto theme = ThemeData::getMenuTheme();
 	std::shared_ptr<Font> font = theme->Text.font;
@@ -4244,54 +4245,57 @@ void GuiMenu::openNetworkSettings_batocera(bool selectWifiEnable)
 	s->addInputTextRow(_("HOSTNAME"), "system.hostname", false);
 #endif
 
-//        std::string a;
-//        auto bluetoothd_enabled = std::make_shared<SwitchComponent>(mWindow);
-//                bool btbaseEnabled = SystemConf::getInstance()->get("bluetooth.enabled") == "1";
-//                bluetoothd_enabled->setState(btbaseEnabled);
-//                s->addWithLabel(_("ENABLE BLUETOOTH"), bluetoothd_enabled);
-//                s->addSaveFunc([bluetoothd_enabled] {
-//                        if (bluetoothd_enabled->changed()) {
-//                        if (bluetoothd_enabled->getState() == false) {
-//                                runSystemCommand("systemctl stop bluetooth", "", nullptr);
-//                                runSystemCommand("rm /storage/.cache/services/bluez.conf", "", nullptr);
-//                        } else {
-//                                runSystemCommand("mkdir -p /storage/.cache/services/", "", nullptr);
-//                                runSystemCommand("touch /storage/.cache/services/bluez.conf", "", nullptr);
-//                                runSystemCommand("systemctl start bluetooth", "", nullptr);
-//                        }
-//                bool bluetoothenabled = bluetoothd_enabled->getState();
-//                SystemConf::getInstance()->set("bluetooth.enabled", bluetoothenabled ? "1" : "0");
-//                                SystemConf::getInstance()->saveSystemConf();
-//                        }
-//                });
-
         // Wifi enable
         auto enable_net = std::make_shared<SwitchComponent>(mWindow);
+        auto enable_adhoc = std::make_shared<SwitchComponent>(mWindow);
+
         enable_net->setState(baseNetworkEnabled);
+	enable_adhoc->setState(adhocEnabled);
+
         s->addWithLabel(_("ENABLE NETWORK"), enable_net, selectWifiEnable);
 
 	// window, title, settingstring,
 	const std::string baseSSID = SystemConf::getInstance()->get("wifi.ssid");
 	const std::string baseKEY = SystemConf::getInstance()->get("wifi.key");
 
-	if (baseNetworkEnabled)
+	auto optionsAdhocID = std::make_shared<OptionListComponent<std::string> >(mWindow, _("ADHOC ID"), false);
+
+	// Adhoc mode options
+       enable_adhoc->setState(adhocEnabled);
+       s->addWithLabel(_("ADHOC NETWORK MODE"), enable_adhoc, selectAdhocEnable);
+
+	std::string selectedAdhocID = SystemConf::getInstance()->get("wifi.adhoc.id");
+	if (selectedAdhocID.empty())
 	{
-		s->addInputTextRow(_("WIFI SSID"), "wifi.ssid", false, false, &openWifiSettings);
-		s->addInputTextRow(_("WIFI KEY"), "wifi.key", true);
+		selectedAdhocID = "1";
 	}
+	optionsAdhocID->add(_("1 (HOST)"),"1", selectedAdhocID == "1");
+	optionsAdhocID->add(_("2 (CLIENT 1)"),"2", selectedAdhocID == "2");
+	optionsAdhocID->add(_("3 (CLIENT 2)"),"3", selectedAdhocID == "3");
+	optionsAdhocID->add(_("4 (CLIENT 3)"),"4", selectedAdhocID == "4");
+	s->addWithLabel(_("ADHOC ID"), optionsAdhocID);
+
+	s->addInputTextRow(_("WIFI SSID"), "wifi.ssid", false, false, &openWifiSettings);
+	s->addInputTextRow(_("WIFI KEY"), "wifi.key", true);
 
-	s->addSaveFunc([baseNetworkEnabled, baseSSID, baseKEY, enable_net, window]
+	s->addSaveFunc([baseNetworkEnabled, selectAdhocEnable, baseSSID, baseKEY, enable_net, enable_adhoc, optionsAdhocID, selectedAdhocID, window]
 	{
 		bool networkenabled = enable_net->getState();
+		bool adhocenabled = enable_adhoc->getState();
+
+		SystemConf::getInstance()->setBool("network.adhoc.enabled", adhocenabled);
+		SystemConf::getInstance()->set("wifi.adhoc.id", optionsAdhocID->getSelected());
 
 		SystemConf::getInstance()->setBool("network.enabled", networkenabled);
 
+		SystemConf::getInstance()->saveSystemConf();
+
 		if (networkenabled)
 		{
 			std::string newSSID = SystemConf::getInstance()->get("wifi.ssid");
 			std::string newKey = SystemConf::getInstance()->get("wifi.key");
 
-			if (baseSSID != newSSID || baseKEY != newKey || !baseNetworkEnabled)
+			if (baseSSID != newSSID || baseKEY != newKey || !baseNetworkEnabled || !selectAdhocEnable)
 			{
 				if (ApiSystem::getInstance()->enableWifi(newSSID, newKey))
 					window->pushGui(new GuiMsgBox(window, _("WIFI ENABLED")));
@@ -4301,14 +4305,19 @@ void GuiMenu::openNetworkSettings_batocera(bool selectWifiEnable)
 		}
 		else if (baseNetworkEnabled)
 			ApiSystem::getInstance()->disableWifi();
+
 	});
 
-	enable_net->setOnChangedCallback([this, s, baseNetworkEnabled, enable_net]()
+	enable_net->setOnChangedCallback([this, s, baseNetworkEnabled, enable_net, adhocEnabled, enable_adhoc]()
 	{
+
 		bool networkenabled = enable_net->getState();
-		if (baseNetworkEnabled != networkenabled)
+		bool adhocenabled = enable_adhoc->getState();
+
+		if (baseNetworkEnabled != networkenabled || adhocEnabled != adhocenabled)
 		{
 			SystemConf::getInstance()->setBool("network.enabled", networkenabled);
+			SystemConf::getInstance()->setBool("network.adhoc.enabled", adhocenabled);
 
 			if (networkenabled)
 				ApiSystem::getInstance()->enableWifi(SystemConf::getInstance()->get("wifi.ssid"), SystemConf::getInstance()->get("wifi.key"));
diff --git a/es-app/src/guis/GuiMenu.h b/es-app/src/guis/GuiMenu.h
index bead7f5..ac44267 100644
--- a/es-app/src/guis/GuiMenu.h
+++ b/es-app/src/guis/GuiMenu.h
@@ -72,7 +72,7 @@ private:
 	void openSystemSettings_batocera();
 	void openGamesSettings_batocera();
 	void openControllersSettings_batocera(int autoSel = 0);
-	void openNetworkSettings_batocera(bool selectWifiEnable = false);	
+	void openNetworkSettings_batocera(bool selectWifiEnable = false, bool selectAdhocEnable = false);	
 	void openQuitMenu_batocera();
 	void openSystemInformations_batocera();
 	void openDeveloperSettings();
