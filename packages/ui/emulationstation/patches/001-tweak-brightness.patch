diff --git a/es-app/src/SystemScreenSaver.cpp b/es-app/src/SystemScreenSaver.cpp
index e37b6c9..8b75358 100644
--- a/es-app/src/SystemScreenSaver.cpp
+++ b/es-app/src/SystemScreenSaver.cpp
@@ -184,7 +184,7 @@ void SystemScreenSaver::stopScreenSaver()
 	if ( screensaver_behavior == "black" )
 	{
 		auto sysbright = SystemConf::getInstance()->get("system.brightness");
-		BrightnessControl::getInstance()->setBrightness(stoi(sysbright) * 10);
+		BrightnessControl::getInstance()->setBrightness(stoi(sysbright));
 	}
 
 	if (mLoadingNext)
diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index a327ea0..2181ddc 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -1180,11 +1180,13 @@ void GuiMenu::openSystemSettings_batocera()
 	{
 		// brightness
 		int brightness = BrightnessControl::getInstance()->getBrightness();
-		auto brightnessComponent = std::make_shared<SliderComponent>(mWindow, 0.f, 100.f, 10.f, "%");
+    float brightness_count = BrightnessControl::getInstance()->getNumBrightness() - 1;
+    std::string brightness_count_str = "/" + std::to_string((int)brightness_count) + "  ";
+		auto brightnessComponent = std::make_shared<SliderComponent>(mWindow, 0.f, brightness_count, 1.f, brightness_count_str);
 		brightnessComponent->setValue(brightness);
 		brightnessComponent->setOnValueChanged([](const float &newVal) {
 			BrightnessControl::getInstance()->setBrightness((int)Math::round(newVal));
-                        SystemConf::getInstance()->set("system.brightness", std::to_string((int)Math::round(newVal) / 10));
+                        SystemConf::getInstance()->set("system.brightness", std::to_string((int)newVal));
 		});
 
 		s->addWithLabel(_("BRIGHTNESS"), brightnessComponent);
diff --git a/es-core/src/BrightnessControl.cpp b/es-core/src/BrightnessControl.cpp
index 706358f..2373fbb 100644
--- a/es-core/src/BrightnessControl.cpp
+++ b/es-core/src/BrightnessControl.cpp
@@ -4,13 +4,16 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <string.h>
+#include <sstream>
 #include <SystemConf.h>
 #include <unistd.h>
 #include "platform.h"
+#include <math.h>
 
 std::string BACKLIGHT_PATH = std::string(getShOutput(R"(/usr/bin/brightness path)"));
 std::string BACKLIGHT_BRIGHTNESS_NAME = BACKLIGHT_PATH + "/brightness";
 std::string BACKLIGHT_BRIGHTNESS_MAX_NAME = BACKLIGHT_PATH + "/max_brightness";
+std::vector<float> brightness_table = {0, 1};
 #define BACKLIGHT_BUFFER_SIZE 127
 
 std::weak_ptr<BrightnessControl> BrightnessControl::sInstance;
@@ -29,6 +32,11 @@ std::shared_ptr<BrightnessControl> &BrightnessControl::getInstance()
 
 BrightnessControl::BrightnessControl() {}
 
+int BrightnessControl::getNumBrightness() const
+{
+  return brightness_table.size();
+}
+
 int BrightnessControl::getBrightness() const
 {
 #ifdef WIN32
@@ -57,19 +65,21 @@ int BrightnessControl::getBrightness() const
     if (max == 0)
         return 0;
 
-    fd = open(BACKLIGHT_BRIGHTNESS_NAME.c_str(), O_RDONLY);
-    if (fd < 0)
-        return false;
-
-    memset(buffer, 0, BACKLIGHT_BUFFER_SIZE + 1);
+    SystemConf::getInstance()->loadSystemConf();
 
-    count = read(fd, buffer, BACKLIGHT_BUFFER_SIZE);
-    if (count > 0)
-        value = atoi(buffer);
-
-    close(fd);
+    std::stringstream ss(SystemConf::getInstance()->get("brightness_table"));
+    brightness_table.clear();
+    float b_val;
+    while (ss >> b_val) {
+      brightness_table.push_back(b_val);
+    }
+    //TODO: need to make a rational initial condition -- this should always be populated by the brightness script on boot??
+    if (brightness_table.empty()) {
+      brightness_table = {0, 0.04, 0.08, 0.13, 0.19, 0.25, 0.33, 0.42, 0.54, 0.71, 1};
+    }
 
-    value = (uint32_t)((value / (float)max * 100.0f) + 0.5f);
+		auto sysbright = SystemConf::getInstance()->get("system.brightness");
+    value = stoi(sysbright);
     return value;
 }
 
@@ -82,8 +92,8 @@ void BrightnessControl::setBrightness(int value)
     if (value < 0)
         value = 0;
 
-    if (value > 100)
-        value = 100;
+    if (value >= brightness_table.size())
+        value = brightness_table.size() - 1;
 
     int fd;
     int max = 100;
@@ -109,8 +119,10 @@ void BrightnessControl::setBrightness(int value)
     if (fd < 0)
         return;
 
-    float percent = (value / 100.0f * (float)max) + 0.5f;
-    sprintf(buffer, "%d\n", (uint32_t)percent);
+    float val = max * brightness_table[value] ;
+    if (val > max)
+        val = max;
+    sprintf(buffer, "%d\n", (uint32_t)val);
 
     count = write(fd, buffer, strlen(buffer));
     if (count < 0)
diff --git a/es-core/src/BrightnessControl.h b/es-core/src/BrightnessControl.h
index b527b31..6ad3559 100644
--- a/es-core/src/BrightnessControl.h
+++ b/es-core/src/BrightnessControl.h
@@ -21,6 +21,7 @@ public:
     bool isAvailable();
 
     int getBrightness() const;
+    int getNumBrightness() const;
     void setBrightness(int Brightness);
 };
 
